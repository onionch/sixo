<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
例如namespace="me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀)
 -->
<mapper namespace="com.onionch.webapp.website.mapper.UserMapper">
    <!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复
    使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型
    resultType="me.gacl.domain.User"就表示将查询结果封装成一个User类的对象返回
    User类就是users表所对应的实体类
    -->
    <!--
        根据id查询得到一个user对象
     -->

    <resultMap type="com.onionch.webapp.website.bean.User" id="userResultMap">
        <id property="uId" column="uId"/>
        <result property="realName" column="realName" />
        <result property="userName" column="userName" />
        <result property="mailAddr" column="mailAddr" />
        <result property="phoneNum" column="phoneNum" />
        <result property="userRole.roleDesc" column="roleDesc" />
        <result property="userRole.roleName" column="roleName" />
        <result property="userRole.access" column="access" />
    </resultMap>

    <select id="all" resultMap="userResultMap">
        SELECT u.uId,u.realName,u.mailAddr,u.phoneNum,u.userName,r.roleDesc,r.access,r.access,
        u.created_date,u.updated_date
        FROM user u LEFT JOIN role r ON u.roleSerialNum=r.serialNum
        WHERE deleted=0 and 1=1
        <if test="userName != null">
            <if test="userName != '' ">
                and u.userName like CONCAT('%',#{userName},'%')
            </if>
        </if>
        order by u.created_date desc limit #{pageIndex},#{pageSize};
    </select>

    <!--<select id="all" resultMap="userResultMap">-->
        <!--SELECT user.*,role.roleDesc FROM user LEFT JOIN role ON user.roleId=role.id-->
        <!--WHERE deleted=0 and 1=1-->
        <!--<if test="userName != null">-->
            <!--<if test="userName != '' ">-->
                <!--and userName like CONCAT('%',#{userName},'%')-->
            <!--</if>-->
        <!--</if>-->
        <!--order by created_date desc limit #{pageIndex},#{pageSize};-->
    <!--</select>-->

    <select id="allCount" resultType="Integer">
        select count(1) from user where 1=1
        <if test="userName != null">
            <if test="userName != '' ">
                and userName like CONCAT('%',#{userName},'%')
            </if>
        </if>;
    </select>

    <select id="listAll"
            resultType="com.onionch.webapp.website.bean.User">
        SELECT user.*,role.roleDesc FROM user LEFT JOIN role ON user.roleSerialNum=role.serialNum
        WHERE deleted=0
    </select>

    <select id="selectByName" parameterType="string"
            resultType="com.onionch.webapp.website.bean.User">
        SELECT * FROM user
        WHERE userName=#{userName} AND deleted=0
        LIMIT 1
    </select>

    <select id="selectByUid" parameterType="string"
            resultType="com.onionch.webapp.website.bean.User">
        SELECT * FROM user
        WHERE uId=#{uId} AND deleted=0
        LIMIT 1
    </select>


    <insert id="create" parameterType="com.onionch.webapp.website.bean.User"
            useGeneratedKeys="true" keyProperty="id">
        INSERT INTO user
        (uId,userName,roleSerialNum,userPassword,realName,mailAddr,phoneNum,created_date,updated_date,deleted)
        VALUES
        (#{uId},#{userName},#{roleSerialNum},#{userPassword},#{realName},#{mailAddr},#{phoneNum},now(),now(),#{deleted})
    </insert>

    <update id="update" parameterType="com.onionch.webapp.website.bean.User">
        UPDATE user set roleSerialNum=#{roleSerialNum},userName=#{userName},userPassword=#{userPassword},updated_date=now()
        WHERE uId=#{uId}
    </update>

    <update id="delete" parameterType="string">
        UPDATE user set deleted=1,updated_date=now()
        WHERE uId=#{uId}
    </update>

</mapper>